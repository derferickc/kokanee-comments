{"ast":null,"code":"var _jsxFileName = \"/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment';\nimport { FixedSizeList as List } from 'react-window';\nimport Button from '@material-ui/core/Button';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\";\n\nconst useStyles = theme => ({\n  instructions: {\n    textAlign: 'center'\n  },\n  inlineBlock: {\n    display: 'inline-block',\n    textAlign: 'center',\n    width: '100%'\n  },\n  followButton: {\n    display: 'inline-block',\n    marginRight: '5px'\n  },\n  customButton: {\n    display: 'inline-block',\n    marginLeft: '5px'\n  },\n  autoSizerWrapper: {\n    display: 'flex'\n  },\n  autoSizerInner: {\n    flex: '1 1 auto',\n    height: '50vh'\n  }\n});\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: props.initialComments || [],\n      follow: true\n    };\n    this.handleFollow = this.handleFollow.bind(this);\n    this.addCustomComment = this.addCustomComment.bind(this);\n    this.handleDupeCheck = this.handleDupeCheck.bind(this);\n  }\n\n  componentDidMount() {\n    this.subscribeInitiate();\n  }\n\n  subscribeInitiate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment);\n\n      if (dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        });\n      }\n\n      console.log('received comment: ', comment);\n    });\n  } // method to handle follow / unfollow clicks\n\n\n  handleFollow() {\n    if (this.state.follow) {\n      stopFollow();\n    } else {\n      startFollow();\n      this.subscribeInitiate();\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    });\n  } // method to add a controlled comment in order to test for dupe handling\n\n\n  addCustomComment() {\n    const comment = createDupeComment();\n    const dupeCheck = this.handleDupeCheck(comment); // if -1, comment is unique and is added to state\n\n    if (dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      });\n    }\n  } // method to check if the current comment already exists in the state (returns index or -1)\n\n\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex(comment => comment.author === val.author && comment.message === val.message);\n    return indexOfComment;\n  }\n\n  render() {\n    const {\n      comments,\n      follow\n    } = this.state;\n    const {\n      classes\n    } = this.props; // Comment component loaded for each index in comments variable\n\n    const commentReactWindow = ({\n      index,\n      style\n    }) => __jsx(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, __jsx(Comment, {\n      comment: comments[index],\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n\n    return __jsx(\"div\", {\n      className: \"commentlist-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.inlineBlock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.followButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, follow == true ? __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleFollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Unfollow\") : __jsx(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.handleFollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Follow\")), __jsx(\"div\", {\n      className: classes.customButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addCustomComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Add Custom Comment\"))), __jsx(\"div\", {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"To 'pause' the incoming stream of comments please click the 'Unfollow' button.\"), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"In order continue receiving glowing reviews and comments, please click the 'Follow' button.\"), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Total Comments: \", comments.length))), __jsx(\"div\", {\n      className: classes.autoSizerWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.autoSizerInner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, __jsx(AutoSizer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, ({\n      height,\n      width\n    }) => __jsx(List, {\n      height: height,\n      width: width,\n      itemSize: 200,\n      itemCount: comments.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, commentReactWindow)))));\n  }\n\n}\n\nexport default withStyles(useStyles)(CommentList);","map":{"version":3,"sources":["/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js"],"names":["React","Component","withStyles","subscribe","stopFollow","startFollow","createDupeComment","FixedSizeList","List","Button","AutoSizer","Comment","useStyles","theme","instructions","textAlign","inlineBlock","display","width","followButton","marginRight","customButton","marginLeft","autoSizerWrapper","autoSizerInner","flex","height","CommentList","constructor","props","state","comments","initialComments","follow","handleFollow","bind","addCustomComment","handleDupeCheck","componentDidMount","subscribeInitiate","comment","dupeCheck","setState","console","log","val","indexOfComment","findIndex","author","message","render","classes","commentReactWindow","index","style","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { withStyles } from '@material-ui/core/styles';\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment'\nimport { FixedSizeList as List } from 'react-window';\nimport Button from '@material-ui/core/Button';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\"\n\nconst useStyles = theme => ({\n  instructions: {\n    textAlign: 'center'\n  },\n  inlineBlock: {\n    display: 'inline-block',\n    textAlign: 'center',\n    width: '100%'\n  },\n  followButton: {\n    display: 'inline-block',\n    marginRight: '5px'\n  },\n  customButton: {\n    display: 'inline-block',\n    marginLeft: '5px'\n  },\n  autoSizerWrapper: {\n    display: 'flex'\n  },\n  autoSizerInner: {\n    flex: '1 1 auto',\n    height: '50vh'\n  },\n});\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      comments: props.initialComments || [],\n      follow: true\n    }\n\n    this.handleFollow = this.handleFollow.bind(this)\n    this.addCustomComment = this.addCustomComment.bind(this)\n    this.handleDupeCheck = this.handleDupeCheck.bind(this)\n  }\n\n  componentDidMount() {\n    this.subscribeInitiate()\n  }\n\n  subscribeInitiate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment)\n      if(dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        })\n      }\n      console.log('received comment: ', comment)\n    })\n  }\n\n  // method to handle follow / unfollow clicks\n  handleFollow() {\n    if(this.state.follow) {\n      stopFollow()\n    } else {\n      startFollow()\n      this.subscribeInitiate()\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    })\n  }\n\n  // method to add a controlled comment in order to test for dupe handling\n  addCustomComment() {\n    const comment = createDupeComment()\n    const dupeCheck = this.handleDupeCheck(comment)\n\n    // if -1, comment is unique and is added to state\n    if(dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      })\n    }\n  }\n\n  // method to check if the current comment already exists in the state (returns index or -1)\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex((comment) => (comment.author === val.author) && (comment.message === val.message))\n\n    return indexOfComment\n  }\n\n  render() {\n    const { comments, follow } = this.state\n    const { classes } = this.props;\n\n    // Comment component loaded for each index in comments variable\n    const commentReactWindow = ({ index, style }) => (\n      <div style={style}>\n          <Comment comment={comments[index]} key={index}/>\n      </div>\n    )\n\n    return (\n      <div className=\"commentlist-container\">\n        <div className={classes.inlineBlock}>\n          <div className={classes.followButton}>\n              {follow == true\n                ? <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.handleFollow}>\n                    Unfollow</Button>\n                : <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={this.handleFollow}>\n                    Follow</Button>\n              }\n          </div>\n\n          <div className={classes.customButton}>\n            <Button \n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.addCustomComment}>\n              Add Custom Comment</Button>\n          </div>\n        </div>\n\n        <div className={classes.instructions}>\n          <p>To 'pause' the incoming stream of comments please click the 'Unfollow' button.</p>\n          <p>In order continue receiving glowing reviews and comments, please click the 'Follow' button.</p>\n          <p><strong>Total Comments: {comments.length}</strong></p>\n        </div>\n\n        {/* Viritualization with Autosizing calculations */}\n        <div className={classes.autoSizerWrapper}>\n          <div className={classes.autoSizerInner}>\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  height={height}\n                  width={width}\n                  itemSize={200}\n                  itemCount={comments.length}\n                >\n                  {commentReactWindow}\n                </List>\n              )}\n            </AutoSizer>\n          </div>\n        </div>\n\n      {/*\n      Original mapping of Comment component with props\n      {comments.map((comment, index) => (\n        <Comment comment={comment} key={index}/>\n      ))}\n      */}\n      </div>\n    )\n  }\n}\n \nexport default withStyles(useStyles)(CommentList)"]},"metadata":{},"sourceType":"module"}