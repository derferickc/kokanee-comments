{"ast":null,"code":"var _jsxFileName = \"/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment';\nimport { FixedSizeList as List } from 'react-window';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\";\nimport Navbar from \"./Navbar\";\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      follow: true\n    };\n    this.handleFollow = this.handleFollow.bind(this);\n    this.addCustomComment = this.addCustomComment.bind(this);\n    this.handleDupeCheck = this.handleDupeCheck.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      comments: this.props.initialComments\n    });\n  }\n\n  componentDidUpdate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment);\n\n      if (dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        });\n      }\n\n      console.log('received comment: ', comment);\n    });\n  } // method to handle follow / unfollow clicks\n\n\n  handleFollow() {\n    if (this.state.follow) {\n      stopFollow();\n    } else {\n      startFollow();\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    });\n  } // method to add a controlled comment in order to test for dupe handling\n\n\n  addCustomComment() {\n    const comment = createDupeComment();\n    const dupeCheck = this.handleDupeCheck(comment); // if -1, comment is unique and is added to state\n\n    if (dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      });\n    }\n  } // method to check if the current comment already exists in the state (returns index or -1)\n\n\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex(comment => comment.author === val.author && comment.message === val.message);\n    return indexOfComment;\n  }\n\n  render() {\n    const {\n      comments,\n      follow\n    } = this.state;\n\n    const commentReactWindow = ({\n      index,\n      style\n    }) => __jsx(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(Comment, {\n      comment: comments[index],\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n\n    return __jsx(\"div\", {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, __jsx(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"follow-button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: this.handleFollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, follow == true ? `Unfollow` : `Follow`)), __jsx(\"div\", {\n      className: \"addcustom-comment-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: this.addCustomComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Add Custom Comment\")), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Comments List Length: \", comments.length), __jsx(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        flex: '1 1 auto',\n        height: '50vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(AutoSizer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, ({\n      height,\n      width\n    }) => __jsx(List, {\n      height: height,\n      width: width,\n      itemSize: 125,\n      itemCount: comments.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, commentReactWindow)))));\n  }\n\n}\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js"],"names":["React","Component","subscribe","stopFollow","startFollow","createDupeComment","FixedSizeList","List","AutoSizer","Comment","Navbar","CommentList","constructor","props","state","comments","follow","handleFollow","bind","addCustomComment","handleDupeCheck","componentDidMount","setState","initialComments","componentDidUpdate","comment","dupeCheck","console","log","val","indexOfComment","findIndex","author","message","render","commentReactWindow","index","style","length","display","flex","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment'\nimport { FixedSizeList as List } from 'react-window';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\"\nimport Navbar from \"./Navbar\"\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      comments: [],\n      follow: true\n    }\n\n    this.handleFollow = this.handleFollow.bind(this)\n    this.addCustomComment = this.addCustomComment.bind(this)\n    this.handleDupeCheck = this.handleDupeCheck.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      comments: this.props.initialComments\n    })\n  }\n\n  componentDidUpdate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment)\n      if(dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        })\n      }\n      console.log('received comment: ', comment)\n    })\n  }\n\n  // method to handle follow / unfollow clicks\n  handleFollow() {\n    if(this.state.follow) {\n      stopFollow()\n    } else {\n      startFollow()\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    })\n  }\n\n  // method to add a controlled comment in order to test for dupe handling\n  addCustomComment() {\n    const comment = createDupeComment()\n    const dupeCheck = this.handleDupeCheck(comment)\n\n    // if -1, comment is unique and is added to state\n    if(dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      })\n    }\n  }\n\n  // method to check if the current comment already exists in the state (returns index or -1)\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex((comment) => (comment.author === val.author) && (comment.message === val.message))\n\n    return indexOfComment\n  }\n\n  render() {\n    const { comments, follow } = this.state\n\n    const commentReactWindow = ({ index, style }) => (\n      <div style={style}>\n          <Comment comment={comments[index]} key={index}/>\n      </div>\n    )\n\n    return (\n      <div className=\"app-container\">\n        <Navbar />\n\n        <div className=\"follow-button-container\">\n          <button onClick={this.handleFollow}>\n            {follow == true\n              ? `Unfollow`\n              : `Follow`}\n          </button>\n        </div>\n\n        <div className=\"addcustom-comment-button\">\n          <button onClick={this.addCustomComment}>Add Custom Comment</button>\n        </div>\n\n        <div>Comments List Length: {comments.length}</div>\n\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: '1 1 auto' , height: '50vh'}}>\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  height={height}\n                  width={width}\n                  itemSize={125}\n                  itemCount={comments.length}\n                >\n                  {commentReactWindow}\n                </List>\n              )}\n            </AutoSizer>\n          </div>\n        </div>\n\n      {/*\n      {comments.map((comment, index) => (\n        <Comment comment={comment} key={index}/>\n      ))}\n      */}\n\n      </div>\n    )\n  }\n}\n \nexport default CommentList"]},"metadata":{},"sourceType":"module"}