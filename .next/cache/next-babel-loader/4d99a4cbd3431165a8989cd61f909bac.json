{"ast":null,"code":"import { loremIpsum } from 'lorem-ipsum';\nimport { name } from './names';\n\nconst makeComment = () => ({\n  author: name(),\n  message: loremIpsum({\n    count: ~~(Math.random() * 3)\n  }),\n  time: new Date()\n});\n\nexport const makeComments = count => {\n  const comments = [];\n\n  for (let i = 0; i < count; i++) {\n    comments.push(makeComment());\n  }\n\n  return comments;\n};\nexport const subscribe = callback => {\n  console.log('subscribing');\n\n  const produce = () => {\n    callback(makeComment());\n    const interval = Math.random() * 5000 + 2000;\n    console.log('next comment in:', interval);\n    setTimeout(produce, interval);\n  };\n\n  setTimeout(produce, 3000);\n};","map":{"version":3,"sources":["/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/models/Comment.ts"],"names":["loremIpsum","name","makeComment","author","message","count","Math","random","time","Date","makeComments","comments","i","push","subscribe","callback","console","log","produce","interval","setTimeout"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,IAAT,QAAqB,SAArB;;AAQA,MAAMC,WAAW,GAAG,OAAgB;AAClCC,EAAAA,MAAM,EAAEF,IAAI,EADsB;AAElCG,EAAAA,OAAO,EAAEJ,UAAU,CAAC;AAAEK,IAAAA,KAAK,EAAE,CAAC,EAAEC,IAAI,CAACC,MAAL,KAAgB,CAAlB;AAAV,GAAD,CAFe;AAGlCC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAH4B,CAAhB,CAApB;;AAMA,OAAO,MAAMC,YAAY,GAAIL,KAAD,IAAmB;AAC7C,QAAMM,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;AAC9BD,IAAAA,QAAQ,CAACE,IAAT,CAAcX,WAAW,EAAzB;AACD;;AACD,SAAOS,QAAP;AACD,CANM;AAQP,OAAO,MAAMG,SAAS,GAAIC,QAAD,IAA0C;AACjEC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpBH,IAAAA,QAAQ,CAACb,WAAW,EAAZ,CAAR;AACA,UAAMiB,QAAQ,GAAGb,IAAI,CAACC,MAAL,KAAgB,IAAhB,GAAuB,IAAxC;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,QAAhC;AACAC,IAAAA,UAAU,CAACF,OAAD,EAAUC,QAAV,CAAV;AACD,GALD;;AAMAC,EAAAA,UAAU,CAACF,OAAD,EAAU,IAAV,CAAV;AACD,CATM","sourcesContent":["import { loremIpsum } from 'lorem-ipsum'\nimport { name } from './names'\n\nexport interface Comment {\n  author: string\n  message: string\n  time: Date\n}\n\nconst makeComment = (): Comment => ({\n  author: name(),\n  message: loremIpsum({ count: ~~(Math.random() * 3) }),\n  time: new Date()\n})\n\nexport const makeComments = (count: number) => {\n  const comments = []\n  for (let i = 0; i < count; i++) {\n    comments.push(makeComment())\n  }\n  return comments\n}\n\nexport const subscribe = (callback: (comment: Comment) => void) => {\n  console.log('subscribing')\n  const produce = () => {\n    callback(makeComment())\n    const interval = Math.random() * 5000 + 2000\n    console.log('next comment in:', interval)\n    setTimeout(produce, interval)\n  }\n  setTimeout(produce, 3000)\n}\n"]},"metadata":{},"sourceType":"module"}