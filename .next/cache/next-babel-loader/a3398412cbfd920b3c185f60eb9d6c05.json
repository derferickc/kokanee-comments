{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment';\nimport { FixedSizeList as List } from 'react-window';\nimport Button from '@material-ui/core/Button';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\";\n\nvar CommentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentList, _Component);\n\n  function CommentList(props) {\n    var _this;\n\n    _classCallCheck(this, CommentList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentList).call(this, props));\n    _this.state = {\n      comments: [],\n      follow: true\n    };\n    _this.handleFollow = _this.handleFollow.bind(_assertThisInitialized(_this));\n    _this.addCustomComment = _this.addCustomComment.bind(_assertThisInitialized(_this));\n    _this.handleDupeCheck = _this.handleDupeCheck.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CommentList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        comments: this.props.initialComments\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      subscribe(function (comment) {\n        var dupeCheck = _this2.handleDupeCheck(comment);\n\n        if (dupeCheck === -1) {\n          _this2.setState({\n            comments: [].concat(_toConsumableArray(_this2.state.comments), [comment])\n          });\n        }\n\n        console.log('received comment: ', comment);\n      });\n    } // method to handle follow / unfollow clicks\n\n  }, {\n    key: \"handleFollow\",\n    value: function handleFollow() {\n      if (this.state.follow) {\n        stopFollow();\n      } else {\n        startFollow();\n      }\n\n      this.setState({\n        follow: !this.state.follow\n      });\n    } // method to add a controlled comment in order to test for dupe handling\n\n  }, {\n    key: \"addCustomComment\",\n    value: function addCustomComment() {\n      var comment = createDupeComment();\n      var dupeCheck = this.handleDupeCheck(comment); // if -1, comment is unique and is added to state\n\n      if (dupeCheck === -1) {\n        this.setState({\n          comments: [].concat(_toConsumableArray(this.state.comments), [comment])\n        });\n      }\n    } // method to check if the current comment already exists in the state (returns index or -1)\n\n  }, {\n    key: \"handleDupeCheck\",\n    value: function handleDupeCheck(val) {\n      var indexOfComment = this.state.comments.findIndex(function (comment) {\n        return comment.author === val.author && comment.message === val.message;\n      });\n      return indexOfComment;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          comments = _this$state.comments,\n          follow = _this$state.follow; // Comment component loaded for each index in comments variable\n\n      var commentReactWindow = function commentReactWindow(_ref) {\n        var index = _ref.index,\n            style = _ref.style;\n        return __jsx(\"div\", {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, __jsx(Comment, {\n          comment: comments[index],\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }));\n      };\n\n      var instructions = {\n        textAlign: 'center'\n      };\n      var inlineBlock = {\n        display: 'inline-block',\n        textAlign: 'center',\n        width: '100%'\n      };\n      var followButton = {\n        display: 'inline-block',\n        marginRight: '10px'\n      };\n      var customButton = {\n        display: 'inline-block',\n        marginLeft: '10px'\n      };\n      return __jsx(\"div\", {\n        className: \"commentlist-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"buttons-container\",\n        style: inlineBlock,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"follow-button-container\",\n        style: followButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, follow == true ? __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleFollow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Unfollow\") : __jsx(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleFollow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Follow\")), __jsx(\"div\", {\n        className: \"addcustom-comment-button\",\n        style: customButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.addCustomComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Add Custom Comment\"))), __jsx(\"div\", {\n        className: \"instructions\",\n        style: instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"To 'pause' the incoming stream of comments please click the 'Unfollow' button.\"), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"In order continue receiving glowing reviews and comments, please click the 'Follow' button.\"), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, __jsx(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Total Comments: \", comments.length))), __jsx(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          flex: '1 1 auto',\n          height: '50vh'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, __jsx(AutoSizer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, function (_ref2) {\n        var height = _ref2.height,\n            width = _ref2.width;\n        return __jsx(List, {\n          height: height,\n          width: width,\n          itemSize: 125,\n          itemCount: comments.length,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, commentReactWindow);\n      }))));\n    }\n  }]);\n\n  return CommentList;\n}(Component);\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/frederickchoe/Projects/React/web-kokanee-fred-choe/components/CommentListClass.js"],"names":["React","Component","subscribe","stopFollow","startFollow","createDupeComment","FixedSizeList","List","Button","AutoSizer","Comment","CommentList","props","state","comments","follow","handleFollow","bind","addCustomComment","handleDupeCheck","setState","initialComments","comment","dupeCheck","console","log","val","indexOfComment","findIndex","author","message","commentReactWindow","index","style","instructions","textAlign","inlineBlock","display","width","followButton","marginRight","customButton","marginLeft","length","flex","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment'\nimport { FixedSizeList as List } from 'react-window';\nimport Button from '@material-ui/core/Button';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\"\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      comments: [],\n      follow: true\n    }\n\n    this.handleFollow = this.handleFollow.bind(this)\n    this.addCustomComment = this.addCustomComment.bind(this)\n    this.handleDupeCheck = this.handleDupeCheck.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      comments: this.props.initialComments\n    })\n  }\n\n  componentDidUpdate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment)\n      if(dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        })\n      }\n      console.log('received comment: ', comment)\n    })\n  }\n\n  // method to handle follow / unfollow clicks\n  handleFollow() {\n    if(this.state.follow) {\n      stopFollow()\n    } else {\n      startFollow()\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    })\n  }\n\n  // method to add a controlled comment in order to test for dupe handling\n  addCustomComment() {\n    const comment = createDupeComment()\n    const dupeCheck = this.handleDupeCheck(comment)\n\n    // if -1, comment is unique and is added to state\n    if(dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      })\n    }\n  }\n\n  // method to check if the current comment already exists in the state (returns index or -1)\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex((comment) => (comment.author === val.author) && (comment.message === val.message))\n\n    return indexOfComment\n  }\n\n  render() {\n    const { comments, follow } = this.state\n\n    // Comment component loaded for each index in comments variable\n    const commentReactWindow = ({ index, style }) => (\n      <div style={style}>\n          <Comment comment={comments[index]} key={index}/>\n      </div>\n    )\n\n    const instructions = {\n      textAlign: 'center'\n    }\n    const inlineBlock = {\n      display: 'inline-block',\n      textAlign: 'center',\n      width: '100%'\n    }\n    const followButton = {\n      display: 'inline-block',\n      marginRight: '10px'\n    }\n    const customButton = {\n      display: 'inline-block',\n      marginLeft: '10px'\n    }\n\n    return (\n      <div className=\"commentlist-container\">\n\n        <div className=\"buttons-container\" style={inlineBlock}>\n          <div className=\"follow-button-container\" style={followButton}>\n              {follow == true\n                ? <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.handleFollow}>\n                    Unfollow</Button>\n                : <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={this.handleFollow}>\n                    Follow</Button>\n              }\n          </div>\n\n          <div className=\"addcustom-comment-button\" style={customButton}>\n            <Button \n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.addCustomComment}>\n              Add Custom Comment</Button>\n          </div>\n        </div>\n\n        <div className=\"instructions\" style={instructions}>\n          <p>To 'pause' the incoming stream of comments please click the 'Unfollow' button.</p>\n          <p>In order continue receiving glowing reviews and comments, please click the 'Follow' button.</p>\n          <p><strong>Total Comments: {comments.length}</strong></p>\n        </div>\n\n        \n\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: '1 1 auto' , height: '50vh'}}>\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  height={height}\n                  width={width}\n                  itemSize={125}\n                  itemCount={comments.length}\n                >\n                  {commentReactWindow}\n                </List>\n              )}\n            </AutoSizer>\n          </div>\n        </div>\n\n      {/*\n      {comments.map((comment, index) => (\n        <Comment comment={comment} key={index}/>\n      ))}\n      */}\n      </div>\n    )\n  }\n}\n \nexport default CommentList"]},"metadata":{},"sourceType":"module"}