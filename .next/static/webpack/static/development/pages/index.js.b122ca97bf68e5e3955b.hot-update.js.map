{"version":3,"file":"static/webpack/static/development/pages/index.js.b122ca97bf68e5e3955b.hot-update.js","sources":["webpack:///./components/CommentListClass.js"],"sourcesContent":["import React, { Component } from \"react\"\nimport { subscribe, stopFollow, startFollow, createDupeComment } from '../models/Comment'\nimport { FixedSizeList as List } from 'react-window';\nimport Button from '@material-ui/core/Button';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Comment from \"./Comment\"\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      comments: [],\n      follow: true\n    }\n\n    this.handleFollow = this.handleFollow.bind(this)\n    this.addCustomComment = this.addCustomComment.bind(this)\n    this.handleDupeCheck = this.handleDupeCheck.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      comments: this.props.initialComments\n    })\n  }\n\n  componentDidUpdate() {\n    subscribe(comment => {\n      const dupeCheck = this.handleDupeCheck(comment)\n      if(dupeCheck === -1) {\n        this.setState({\n          comments: [...this.state.comments, comment]\n        })\n      }\n      console.log('received comment: ', comment)\n    })\n  }\n\n  // method to handle follow / unfollow clicks\n  handleFollow() {\n    if(this.state.follow) {\n      stopFollow()\n    } else {\n      startFollow()\n    }\n\n    this.setState({\n      follow: !this.state.follow\n    })\n  }\n\n  // method to add a controlled comment in order to test for dupe handling\n  addCustomComment() {\n    const comment = createDupeComment()\n    const dupeCheck = this.handleDupeCheck(comment)\n\n    // if -1, comment is unique and is added to state\n    if(dupeCheck === -1) {\n      this.setState({\n        comments: [...this.state.comments, comment]\n      })\n    }\n  }\n\n  // method to check if the current comment already exists in the state (returns index or -1)\n  handleDupeCheck(val) {\n    const indexOfComment = this.state.comments.findIndex((comment) => (comment.author === val.author) && (comment.message === val.message))\n\n    return indexOfComment\n  }\n\n  render() {\n    const { comments, follow } = this.state\n\n    // Comment component loaded for each index in comments variable\n    const commentReactWindow = ({ index, style }) => (\n      <div style={style}>\n          <Comment comment={comments[index]} key={index}/>\n      </div>\n    )\n\n    const instructions = {\n      textAlign: 'center'\n    }\n    const inlineBlock = {\n      display: 'inline-block',\n      textAlign: 'center',\n      width: '100%'\n    }\n    const followButton = {\n      display: 'inline-block',\n      marginRight: '5px'\n    }\n    const customButton = {\n      display: 'inline-block',\n      marginLeft: '5px'\n    }\n\n    return (\n      <div className=\"commentlist-container\">\n\n        <div className=\"buttons-container\" style={inlineBlock}>\n          <div className=\"follow-button-container\" style={followButton}>\n              {follow == true\n                ? <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.handleFollow}>\n                    Unfollow</Button>\n                : <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={this.handleFollow}>\n                    Follow</Button>\n              }\n          </div>\n\n          <div className=\"addcustom-comment-button\" style={customButton}>\n            <Button \n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.addCustomComment}>\n              Add Custom Comment</Button>\n          </div>\n        </div>\n\n        <div className=\"instructions\" style={instructions}>\n          <p>To 'pause' the incoming stream of comments please click the 'Unfollow' button.</p>\n          <p>In order continue receiving glowing reviews and comments, please click the 'Follow' button.</p>\n          <p><strong>Total Comments: {comments.length}</strong></p>\n        </div>\n\n        \n\n        <div style={{ display: 'flex' }}>\n          <div style={{ flex: '1 1 auto' , height: '50vh'}}>\n            <AutoSizer>\n              {({ height, width }) => (\n                <List\n                  height={height}\n                  width={width}\n                  itemSize={200}\n                  itemCount={comments.length}\n                >\n                  {commentReactWindow}\n                </List>\n              )}\n            </AutoSizer>\n          </div>\n        </div>\n\n      {/*\n      {comments.map((comment, index) => (\n        <Comment comment={comment} key={index}/>\n      ))}\n      */}\n      </div>\n    )\n  }\n}\n \nexport default CommentList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAVA;AAWA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAqBA;;;;AAxJA;AACA;AA0JA;;;;A","sourceRoot":""}